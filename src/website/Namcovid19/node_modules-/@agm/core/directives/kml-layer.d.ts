import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { KmlMouseEvent } from './../services/google-maps-types';
import { KmlLayerManager } from './../services/managers/kml-layer-manager';
import * as ɵngcc0 from '@angular/core';
export declare class AgmKmlLayer implements OnInit, OnDestroy, OnChanges {
    private _manager;
    private _addedToManager;
    private _id;
    private _subscriptions;
    private static _kmlLayerOptions;
    /**
     * If true, the layer receives mouse events. Default value is true.
     */
    clickable: boolean;
    /**
     * By default, the input map is centered and zoomed to the bounding box of the contents of the
     * layer.
     * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom
     * were never set.
     */
    preserveViewport: boolean;
    /**
     * Whether to render the screen overlays. Default true.
     */
    screenOverlays: boolean;
    /**
     * Suppress the rendering of info windows when layer features are clicked.
     */
    suppressInfoWindows: boolean;
    /**
     * The URL of the KML document to display.
     */
    url: string;
    /**
     * The z-index of the layer.
     */
    zIndex: number | null;
    /**
     * This event is fired when a feature in the layer is clicked.
     */
    layerClick: EventEmitter<KmlMouseEvent>;
    /**
     * This event is fired when the KML layers default viewport has changed.
     */
    defaultViewportChange: EventEmitter<void>;
    /**
     * This event is fired when the KML layer has finished loading.
     * At this point it is safe to read the status property to determine if the layer loaded
     * successfully.
     */
    statusChange: EventEmitter<void>;
    constructor(_manager: KmlLayerManager);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private _updatePolygonOptions;
    private _addEventListeners;
    /** @internal */
    id(): string;
    /** @internal */
    toString(): string;
    /** @internal */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AgmKmlLayer>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AgmKmlLayer, "agm-kml-layer", never, {
    "clickable": "clickable";
    "preserveViewport": "preserveViewport";
    "screenOverlays": "screenOverlays";
    "suppressInfoWindows": "suppressInfoWindows";
    "url": "url";
    "zIndex": "zIndex";
}, {
    "layerClick": "layerClick";
    "defaultViewportChange": "defaultViewportChange";
    "statusChange": "statusChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia21sLWxheWVyLmQudHMiLCJzb3VyY2VzIjpbImttbC1sYXllci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgS21sTW91c2VFdmVudCB9IGZyb20gJy4vLi4vc2VydmljZXMvZ29vZ2xlLW1hcHMtdHlwZXMnO1xuaW1wb3J0IHsgS21sTGF5ZXJNYW5hZ2VyIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9tYW5hZ2Vycy9rbWwtbGF5ZXItbWFuYWdlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBZ21LbWxMYXllciBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgX21hbmFnZXI7XG4gICAgcHJpdmF0ZSBfYWRkZWRUb01hbmFnZXI7XG4gICAgcHJpdmF0ZSBfaWQ7XG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9ucztcbiAgICBwcml2YXRlIHN0YXRpYyBfa21sTGF5ZXJPcHRpb25zO1xuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHRoZSBsYXllciByZWNlaXZlcyBtb3VzZSBldmVudHMuIERlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICAgKi9cbiAgICBjbGlja2FibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIGlucHV0IG1hcCBpcyBjZW50ZXJlZCBhbmQgem9vbWVkIHRvIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIGNvbnRlbnRzIG9mIHRoZVxuICAgICAqIGxheWVyLlxuICAgICAqIElmIHRoaXMgb3B0aW9uIGlzIHNldCB0byB0cnVlLCB0aGUgdmlld3BvcnQgaXMgbGVmdCB1bmNoYW5nZWQsIHVubGVzcyB0aGUgbWFwJ3MgY2VudGVyIGFuZCB6b29tXG4gICAgICogd2VyZSBuZXZlciBzZXQuXG4gICAgICovXG4gICAgcHJlc2VydmVWaWV3cG9ydDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHJlbmRlciB0aGUgc2NyZWVuIG92ZXJsYXlzLiBEZWZhdWx0IHRydWUuXG4gICAgICovXG4gICAgc2NyZWVuT3ZlcmxheXM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3VwcHJlc3MgdGhlIHJlbmRlcmluZyBvZiBpbmZvIHdpbmRvd3Mgd2hlbiBsYXllciBmZWF0dXJlcyBhcmUgY2xpY2tlZC5cbiAgICAgKi9cbiAgICBzdXBwcmVzc0luZm9XaW5kb3dzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkwgb2YgdGhlIEtNTCBkb2N1bWVudCB0byBkaXNwbGF5LlxuICAgICAqL1xuICAgIHVybDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB6LWluZGV4IG9mIHRoZSBsYXllci5cbiAgICAgKi9cbiAgICB6SW5kZXg6IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIGEgZmVhdHVyZSBpbiB0aGUgbGF5ZXIgaXMgY2xpY2tlZC5cbiAgICAgKi9cbiAgICBsYXllckNsaWNrOiBFdmVudEVtaXR0ZXI8S21sTW91c2VFdmVudD47XG4gICAgLyoqXG4gICAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSBLTUwgbGF5ZXJzIGRlZmF1bHQgdmlld3BvcnQgaGFzIGNoYW5nZWQuXG4gICAgICovXG4gICAgZGVmYXVsdFZpZXdwb3J0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgLyoqXG4gICAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSBLTUwgbGF5ZXIgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gICAgICogQXQgdGhpcyBwb2ludCBpdCBpcyBzYWZlIHRvIHJlYWQgdGhlIHN0YXR1cyBwcm9wZXJ0eSB0byBkZXRlcm1pbmUgaWYgdGhlIGxheWVyIGxvYWRlZFxuICAgICAqIHN1Y2Nlc3NmdWxseS5cbiAgICAgKi9cbiAgICBzdGF0dXNDaGFuZ2U6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBjb25zdHJ1Y3RvcihfbWFuYWdlcjogS21sTGF5ZXJNYW5hZ2VyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHByaXZhdGUgX3VwZGF0ZVBvbHlnb25PcHRpb25zO1xuICAgIHByaXZhdGUgX2FkZEV2ZW50TGlzdGVuZXJzO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBpZCgpOiBzdHJpbmc7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRvU3RyaW5nKCk6IHN0cmluZztcbiAgICAvKiogQGludGVybmFsICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==